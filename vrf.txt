



CFRG                                                         S. Goldberg
Internet-Draft                                                 L. Reyzin
Intended status: Standards Track                       Boston University
Expires: March 11, 2019                                  D. Papadopoulos
                           Hong Kong University of Science and Techology
                                                               J. Vcelak
                                                                     NS1
                                                       September 7, 2018


                   Verifiable Random Functions (VRFs)
                         draft-irtf-cfrg-vrf-03

Abstract

   A Verifiable Random Function (VRF) is the public-key version of a
   keyed cryptographic hash.  Only the holder of the private key can
   compute the hash, but anyone with public key can verify the
   correctness of the hash.  VRFs are useful for preventing enumeration
   of hash-based data structures.  This document specifies several VRF
   constructions that are secure in the cryptographic random oracle
   model.  One VRF uses RSA and the other VRF uses Eliptic Curves (EC).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 11, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of



Goldberg, et al.         Expires March 11, 2019                 [Page 1]

Internet-Draft                     VRF                    September 2018


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Rationale . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Requirements  . . . . . . . . . . . . . . . . . . . . . .   3
     1.3.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  VRF Algorithms  . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  VRF Security Properties . . . . . . . . . . . . . . . . . . .   4
     3.1.  Full Uniqueness or Trusted Uniqueness . . . . . . . . . .   5
     3.2.  Full Collison Resistance or Trusted Collision Resistance    5
     3.3.  Full Pseudorandomness or Selective Pseudorandomness . . .   5
     3.4.  A random-oracle-like unpredictability property  . . . . .   6
   4.  RSA Full Domain Hash VRF (RSA-FDH-VRF)  . . . . . . . . . . .   7
     4.1.  RSA-FDH-VRF Proving . . . . . . . . . . . . . . . . . . .   8
     4.2.  RSA-FDH-VRF Proof To Hash . . . . . . . . . . . . . . . .   8
     4.3.  RSA-FDH-VRF Verifying . . . . . . . . . . . . . . . . . .   9
   5.  Elliptic Curve VRF (ECVRF)  . . . . . . . . . . . . . . . . .  10
     5.1.  ECVRF Proving . . . . . . . . . . . . . . . . . . . . . .  12
     5.2.  ECVRF Proof To Hash . . . . . . . . . . . . . . . . . . .  13
     5.3.  ECVRF Verifying . . . . . . . . . . . . . . . . . . . . .  13
     5.4.  ECVRF Auxiliary Functions . . . . . . . . . . . . . . . .  14
       5.4.1.  ECVRF Hash To Curve . . . . . . . . . . . . . . . . .  14
       5.4.2.  ECVRF Nonce Generation  . . . . . . . . . . . . . . .  21
       5.4.3.  ECVRF Hash Points . . . . . . . . . . . . . . . . . .  22
       5.4.4.  ECVRF Decode Proof  . . . . . . . . . . . . . . . . .  23
     5.5.  ECVRF Ciphersuites  . . . . . . . . . . . . . . . . . . .  24
     5.6.  When the ECVRF Keys are Untrusted . . . . . . . . . . . .  26
       5.6.1.  ECVRF Validate Key  . . . . . . . . . . . . . . . . .  26
   6.  Implementation Status . . . . . . . . . . . . . . . . . . . .  28
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  29
     7.1.  Key Generation  . . . . . . . . . . . . . . . . . . . . .  29
       7.1.1.  Uniqueness and collision resistance with untrusted
               keys  . . . . . . . . . . . . . . . . . . . . . . . .  29
       7.1.2.  Pseudorandomness with untrusted keys  . . . . . . . .  29
     7.2.  Selective vs Full Pseudorandomness  . . . . . . . . . . .  30
     7.3.  Proper pseudorandom nonce for ECVRF . . . . . . . . . . .  30
     7.4.  Side-channel attacks  . . . . . . . . . . . . . . . . . .  30
     7.5.  Proofs Provide No Secrecy for VRF Input . . . . . . . . .  31
     7.6.  Prehashing  . . . . . . . . . . . . . . . . . . . . . . .  31
     7.7.  Hash function domain separation and future-proofing . . .  31
   8.  Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .  32



Goldberg, et al.         Expires March 11, 2019                 [Page 2]

Internet-Draft                     VRF                    September 2018


   9.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  33
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  33
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  33
     10.2.  Informative References . . . . . . . . . . . . . . . . .  34
   Appendix A.  Test Vectors . . . . . . . . . . . . . . . . . . . .  36
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  36

1.  Introduction

1.1.  Rationale

   A Verifiable Random Function (VRF) [MRV99] is the public-key version
   of a keyed cryptographic hash.  Only the holder of the private VRF
   key can compute the hash, but anyone with corresponding public key
   can verify the correctness of the hash.

   A key application of the VRF is to provide privacy against offline
   enumeration (e.g. dictionary attacks) on data stored in a hash-based
   data structure.  In this application, a Prover holds the VRF private
   key and uses the VRF hashing to construct a hash-based data structure
   on the input data.  Due to the nature of the VRF, only the Prover can
   answer queries about whether or not some data is stored in the data
   structure.  Anyone who knows the public VRF key can verify that the
   Prover has answered the queries correctly.  However no offline
   inferences (i.e. inferences without querying the Prover) can be made
   about the data stored in the data strucuture.

1.2.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.3.  Terminology

   The following terminology is used through this document:

   SK:  The private key for the VRF.

   PK:  The public key for the VRF.

   alpha or alpha_string:  The input to be hashed by the VRF.

   beta or beta_string:  The VRF hash output.

   pi or pi_string:  The VRF proof.





Goldberg, et al.         Expires March 11, 2019                 [Page 3]

Internet-Draft                     VRF                    September 2018


   Prover:  The Prover holds the private VRF key SK and public VRF key
      PK.

   Verifier:  The Verifier holds the public VRF key PK.

2.  VRF Algorithms

   A VRF comes with a key generation algorithm that generates a public
   VRF key PK and private VRF key SK.

   The prover hashes an input alpha using the private VRF key SK to
   obtain a VRF hash output beta

      beta = VRF_hash(SK, alpha)

   The VRF_hash algorithm is deterministic, in the sense that it always
   produces the same output beta given a pair of inputs (SK, alpha).
   The prover also uses the private key SK to construct a proof pi that
   beta is the correct hash output

      pi = VRF_prove(SK, alpha)

   The VRFs defined in this document allow anyone to deterministically
   obtain the VRF hash output beta directly from the proof value pi as

      beta = VRF_proof_to_hash(pi)

   Notice that this means that

      VRF_hash(SK, alpha) = VRF_proof_to_hash(VRF_prove(SK, alpha))

   and thus this document will specify VRF_prove and VRF_proof_to_hash
   rather than VRF_hash.

   The proof pi allows a Verifier holding the public key PK to verify
   that beta is the correct VRF hash of input alpha under key PK.  Thus,
   the VRF also comes with an algorithm

      VRF_verify(PK, alpha, pi)

   that outputs VALID if pi was correctly produced, and outputs INVALID
   otherwise.

3.  VRF Security Properties

   VRFs are designed to ensure the following security properties.





Goldberg, et al.         Expires March 11, 2019                 [Page 4]

Internet-Draft                     VRF                    September 2018


3.1.  Full Uniqueness or Trusted Uniqueness

   Uniqueness means that, for any fixed public VRF key and for any input
   alpha, there is a unique VRF output beta that can be proved to be
   valid.  Uniqueness must hold even for an adversarial Prover that
   knows the VRF private key SK.

   More precisely, "full uniqueness" states that a computationally-
   bounded adversary cannot choose a VRF public key PK, a VRF input
   alpha, and two proofs pi1 and pi2 such that VRF_verify(PK, alpha,
   pi1) and VRF_verify(PK, alpha, pi2) both output VALID, and
   VRF_proof_to_hash(pi1) is not equal to VRF_proof_to_hash(pi2).

   A slightly weaker security property called "trusted uniqueness"
   sufficies for many applications.  Trusted uniqueness is the same as
   full uniqueness, but it must hold only if the VRF keys PK and SK were
   generated in a trustworthy manner.  In other words, uniqueness might
   not hold if keys were generated in an invalid manner or with bad
   randomness.

3.2.  Full Collison Resistance or Trusted Collision Resistance

   Like any cryprographic hash function, VRFs need to be collision
   resistant.  Collison resistance must hold even for an adversarial
   Prover that knows the VRF private key SK.

   More precisely, "full collision resistance" states that it should be
   computationally infeasible for an adversary to find two distinct VRF
   inputs alpha1 and alpha2 that have the same VRF hash beta, even if
   that adversary knows the private VRF key SK.

   For most applications, a slightly weaker security property called
   "trusted collision resistance" suffices.  Trusted collision
   resistance is the same as collision resistance, but it holds only if
   PK and SK were generated in a trustworthy manner.

3.3.  Full Pseudorandomness or Selective Pseudorandomness

   Pseudorandomness ensures that when an adversarial Verifier sees a VRF
   hash output beta without its corresponding VRF proof pi, then beta is
   indistinguishable from a random value.

   More precisely, suppose the public and private VRF keys (PK, SK) were
   generated in a trustworthy manner.  Pseudorandomness ensures that the
   VRF hash output beta (without its corresponding VRF proof pi) on any
   adversarially-chosen "target" VRF input alpha looks indistinguishable
   from random for any computationally bounded adversary who does not
   know the private VRF key SK.  This holds even if the adversary also



Goldberg, et al.         Expires March 11, 2019                 [Page 5]

Internet-Draft                     VRF                    September 2018


   gets to choose other VRF inputs alpha' and observe their
   corresponding VRF hash outputs beta' and proofs pi'.

   With "full pseudorandomness", the adversary is allowed to choose the
   "target" VRF input alpha at any time, even after it observes VRF
   outputs beta' and proofs pi' on a variety of chosen inputs alpha'.

   "Selective pseudorandomness" is a weaker security property which
   suffices in many applications.  Here, the adversary must choose the
   target VRF input alpha independently of the public VRF key PK, and
   before it observes VRF outputs beta' and proofs pi' on inputs alpha'
   of its choice.

   It is important to remember that the VRF output beta does not look
   random to the Prover, or to any other party that knows the private
   VRF key SK!  Such a party can easily distinguish beta from a random
   value by comparing beta to the result of VRF_hash(SK, alpha).

   Also, the VRF output beta does not look random to any party that
   knows valid VRF proof pi corresponding to the VRF input alpha, even
   if this party does not know the private VRF key SK.  Such a party can
   easily distinguish beta from a random value by checking whether
   VRF_verify(PK, alpha, pi) returns "VALID" and beta =
   VRF_proof_to_hash(pi).

   Also, the VRF output beta may not look random if VRF key generation
   was not done in a trustworthy fashion.  (For example, if VRF keys
   were generated with bad randomness.)

3.4.  A random-oracle-like unpredictability property

   Pseudorandomness, as defined in Section 3.3, does not hold if the VRF
   keys were generated adversarially.  For instance, if an adversary
   outputs VRF keys that are deterministically generated (or hard-coded
   and publicly known), then the outputs are easily derived by anyone.

   There is, however, a different type of unpredictability that is
   desirable in certain VRF applications (such as [GHMVZ17] and
   [KRDO17]) This property is similar to the unpredictability achieved
   by an (ordinary, unkeyed) cryptographic hash function: if the input
   has enough entropy (i.e., cannot be predicted), then the correct
   output is indistinguishable from uniform.  The property has not been
   formally specified in cryptographic literature.

   Although neither formal definitions nor proofs of this property have
   appeared in cryptographic literature, the VRF schemes presented in
   this specification are believed to satisfy this property if the
   public key was generated in a trustworthy manner.  Additionally, the



Goldberg, et al.         Expires March 11, 2019                 [Page 6]

Internet-Draft                     VRF                    September 2018


   ECVRF also satisifies this property even if the public key was not
   generated in a trustworthy manner, as long as the public key
   satisfies the key validation procedure in Section 5.6.

4.  RSA Full Domain Hash VRF (RSA-FDH-VRF)

   The RSA Full Domain Hash VRF (RSA-FDH-VRF) is a VRF that satisfies
   the "trusted uniqueness", "trusted collision resistance", and "full
   pseudorandomness" properties defined in Section 3.  Its security
   follows from the standard RSA assumption in the random oracle model.
   Formal security proofs are in [PWHVNRG17].

   The VRF computes the proof pi as a deterministic RSA signature on
   input alpha using the RSA Full Domain Hash Algorithm [RFC8017]
   parametrized with the selected hash algorithm.  RSA signature
   verification is used to verify the correctness of the proof.  The VRF
   hash output beta is simply obtained by hashing the proof pi with the
   selected hash algorithm.

   The key pair for RSA-FDH-VRF MUST be generated in a way that it
   satisfies the conditions specified in Section 3 of [RFC8017].

   In this document, the notation from [RFC8017] is used.

   Parameters used:

      (n, e) - RSA public key

      K - RSA private key

      k - length in octets of the RSA modulus n (k must be less than
      2^32)

   Fixed options:

      Hash - cryptographic hash function

      hLen - output length in octets of hash function Hash

   Primitives used:

      I2OSP - Conversion of a nonnegative integer to an octet string as
      defined in Section 4.1 of [RFC8017]

      OS2IP - Conversion of an octet string to a nonnegative integer as
      defined in Section 4.2 of [RFC8017]





Goldberg, et al.         Expires March 11, 2019                 [Page 7]

Internet-Draft                     VRF                    September 2018


      RSASP1 - RSA signature primitive as defined in Section 5.2.1 of
      [RFC8017]

      RSAVP1 - RSA verification primitive as defined in Section 5.2.2 of
      [RFC8017]

      MGF1 - Mask Generation Function based on the hash function Hash as
      defined in Section B.2.1 of [RFC8017]

      || - octet string concatenation

4.1.  RSA-FDH-VRF Proving

   RSAFDHVRF_prove(K, alpha_string)

   Input:

      K - RSA private key

      alpha_string - VRF hash input, an octet string

   Output:

      pi_string - proof, an octet string of length k

   Steps:

   1.  one_string = 0x01 = I2OSP(1, 1), a single octet with value 1

   2.  EM = MGF1(one_string || I2OSP(k, 4) || I2OSP(n, k) ||
       alpha_string, k - 1)

   3.  m = OS2IP(EM)

   4.  s = RSASP1(K, m)

   5.  pi_string = I2OSP(s, k)

   6.  Output pi_string

4.2.  RSA-FDH-VRF Proof To Hash

   RSAFDHVRF_proof_to_hash(pi_string)

   Input:

      pi_string - proof, an octet string of length k




Goldberg, et al.         Expires March 11, 2019                 [Page 8]

Internet-Draft                     VRF                    September 2018


   Output:

      beta_string - VRF hash output, an octet string of length hLen

   Important note:

      RSAFDHVRF_proof_to_hash should be run only on pi_string that is
      known to have been produced by RSAFDHVRF_prove or has passed
      verification through RSAFDHVRF_verify

   Steps:

   1.  two_string = 0x02 = I2OSP(2, 1), a single octet with value 2

   2.  beta_string = Hash(two_string || pi_string)

   3.  Output beta_string

4.3.  RSA-FDH-VRF Verifying

   RSAFDHVRF_verify((n, e), alpha_string, pi_string)

   Input:

      (n, e) - RSA public key

      alpha_string - VRF hash input, an octet string

      pi_string - proof to be verified, an octet string of length n

   Output:

      "VALID" or "INVALID"

   Steps:

   1.  s = OS2IP(pi_string)

   2.  m = RSAVP1((n, e), s)

   3.  EM = I2OSP(m, k - 1)

   4.  one_string = 0x01 = I2OSP(1, 1), a single octet with value 1

   5.  EM' = MGF1(one_string || I2OSP(k, 4) || I2OSP(n, k) ||
       alpha_string, k - 1)

   6.  If EM and EM' are equal, output "VALID"; else output "INVALID".



Goldberg, et al.         Expires March 11, 2019                 [Page 9]

Internet-Draft                     VRF                    September 2018


5.  Elliptic Curve VRF (ECVRF)

   The Elliptic Curve Verifiable Random Function (ECVRF) is a VRF that
   satisfies the trusted uniqueness, trusted collision resistance, and
   full pseudorandomness properties defined in Section 3.  The security
   of this VRF follows from the decisional Diffie-Hellman (DDH)
   assumption in the random oracle model.  Formal security proofs are in
   [PWHVNRG17].

   To additionally satisfy "full uniqueness" and "full collision
   resistance", the Verifier MUST additionally perform the validation
   procedure specified in Section 5.6 upon receipt of the public VRF
   key.

   Fixed options (specified in Section 5.5):

      F - finite field

      2n - length, in octets, of a field element in F, rounded up to the
      nearest even integer

      E - elliptic curve (EC) defined over F

      ptLen - length, in octets, of an EC point encoded as an octet
      string

      G - subgroup of E of large prime order

      q - prime order of group G

      qLen - length of q in octets, i.e., smallest integer such that
      2^(8qLen)>q (note that in the typical case, qLen equals 2n or is
      close to 2n)

      cofactor - number of points on E divided by q

      B - generator of group G

      Hash - cryptographic hash function

      hLen - output length in octets of Hash; must be at least 2n

      suite_string - a single nonzero octet specifying the ECVRF
      ciphersuite, which determines the above options

   Notation and primitives used:





Goldberg, et al.         Expires March 11, 2019                [Page 10]

Internet-Draft                     VRF                    September 2018


      Elliptic curve operations are written in additive notation, with
      P+Q denoting point addition and x*P denoting scalar multiplication
      of a point P by a scalar x

      x^y - a raised to the power b

      x*y - a multiplied by b

      || - octet string concatenation

      ECVRF_hash_to_curve - collision resistant hash of strings to an EC
      point; options described in Section 5.4.1 and specified in
      Section 5.5.

      ECVRF_nonce_generation - derives a pseudorandom nonce from SK and
      the input as part of ECVRF proving.  Specified in Section 5.5

      ECVRF_hash_points - collision resistant hash of EC points to an
      integer.  Specified in Section 5.4.3.

   Type conversions:

      int_to_string(a, len) - conversion of nonnegative integer a to to
      octet string of length len as specified in Section 5.5.

      string_to_int(a_string) - conversion of an octet string a_string
      to a nonnegative integer as specified in Section 5.5.

      point_to_string - conversion of EC point to an ptLen-octet string
      as specified in Section 5.5

      string_to_point - conversion of an ptLen-octet string to EC point
      as specified in Section 5.5.  string_to_point returns INVALID if
      the octet string does not convert to a valid EC point.

      arbitrary_string_to_point - conversion of an arbitrary octet
      string to an EC point as specified in Section 5.5

      Note that with certain software libraries (for big integer and
      elliptic curve arithmetic), the int_to_string and point_to_string
      conversions are not needed.  For example, in some implementations,
      EC point operations will take octet strings as inputs and produce
      octet strings as outputs, without introducing a seperate elliptic
      curve point type.

   Parameters used (the generation of these parameters is specified in
   Section 5.5):




Goldberg, et al.         Expires March 11, 2019                [Page 11]

Internet-Draft                     VRF                    September 2018


      SK - VRF private key

      x - VRF secret scalar, an integer

         Note: depending on the ciphersuite used, the VRF secret scalar
         may be equal to SK; else, it is derived from SK

      Y = x*B - VRF public key, an EC point

5.1.  ECVRF Proving

   Note: this function must have the VRF private key SK as input.  Below
   we make it more efficient by supplying it also with the secret scalar
   x and the public key Y as additional inputs; however, each of these
   can be computed from SK if desired.

   ECVRF_prove(Y, x, alpha_string)

   Input:

      SK - VRF private key

      x - VRF secret scalar

      Y = x*B - VRF public key

      alpha_string = input alpha, an octet string

   Output:

      pi_string - VRF proof, octet string of length ptLen+n+qLen

   Steps:

   1.  H = ECVRF_hash_to_curve(suite_string, Y, alpha_string)

   2.  h_string = point_to_string(H)

   3.  Gamma = x*H

   4.  k = ECVRF_nonce_generation(SK, h_string)

   5.  c = ECVRF_hash_points(H, Gamma, k*B, k*H)

   6.  s = (k + c*x) mod q

   7.  pi_string = point_to_string(Gamma) || int_to_string(c, n) ||
       int_to_string(s, qLen)



Goldberg, et al.         Expires March 11, 2019                [Page 12]

Internet-Draft                     VRF                    September 2018


   8.  Output pi_string

5.2.  ECVRF Proof To Hash

   ECVRF_proof_to_hash(pi_string)

   Input:

      pi_string - VRF proof, octet string of length ptLen+n+qLen

   Output:

      "INVALID", or

      beta_string - VRF hash output, octet string of length hLen

   Important note:

      ECVRF_proof_to_hash should be run only on pi_string that is known
      to have been produced by ECVRF_prove or has passed verification
      through ECVRF_verify

   Steps:

   1.  D = ECVRF_decode_proof(pi_string)

   2.  If D is "INVALID", output "INVALID" and stop

   3.  (Gamma, c, s) = D

   4.  three_string = 0x03 = int_to_string(3, 1), a single octet with
       value 3

   5.  beta_string = Hash(suite_string || three_string ||
       point_to_string(cofactor * Gamma))

   6.  Output beta_string

5.3.  ECVRF Verifying

   ECVRF_verify(Y, pi_string, alpha_string)

   Input:

      Y - public key, an EC point

      pi_string - VRF proof, octet string of length ptLen+n+qLen




Goldberg, et al.         Expires March 11, 2019                [Page 13]

Internet-Draft                     VRF                    September 2018


      alpha_string - VRF input, octet string

   Output:

      "VALID" or "INVALID"

   Steps:

   1.  D = ECVRF_decode_proof(pi_string)

   2.  If D is "INVALID", output "INVALID" and stop

   3.  (Gamma, c, s) = D

   4.  H = ECVRF_hash_to_curve(suite_string, Y, alpha_string)

   5.  U = s*B - c*Y

   6.  V = s*H - c*Gamma

   7.  c' = ECVRF_hash_points(H, Gamma, U, V)

   8.  If c and c' are equal, output "VALID"; else output "INVALID"

5.4.  ECVRF Auxiliary Functions

5.4.1.  ECVRF Hash To Curve

   The ECVRF_hash_to_curve algorithm takes in the VRF input alpha and
   converts it to H, an EC point in G.  This algorithm is the only place
   the VRF input alpha is used in for proving and verfying.  See
   Section 7.6 for further discussion.

   The algorithms in this section are not compatible with each other;
   the choice of algorithm is made in Section 5.5.

5.4.1.1.  ECVRF_hash_to_curve_try_and_increment

   The following ECVRF_hash_to_curve_try_and_increment(suite_string, Y,
   alpha_string) algorithm implements ECVRF_hash_to_curve in a simple
   and generic way that works for any elliptic curve.

   The running time of this algorithm depends on alpha_string.  For the
   ciphersuites specified in Section 5.5, this algorithm is expected to
   find a valid curve point after approximately two attempts (i.e., when
   ctr=1) on average.





Goldberg, et al.         Expires March 11, 2019                [Page 14]

Internet-Draft                     VRF                    September 2018


   However, because the running time of algorithm depends on
   alpha_string, this algorithm SHOULD be avoided in applications where
   it is important that the VRF input alpha remain secret.

   ECVRF_hash_to_try_and_increment(suite_string, Y, alpha_string)

   Input:

      suite_string - a single octet specifying ECVRF ciphersuite.

      Y - public key, an EC point

      alpha_string - value to be hashed, an octet string

   Output:

      H - hashed value, a finite EC point in G

   Steps:

   1.  ctr = 0

   2.  PK_string = point_to_string(Y)

   3.  one_string = 0x01 = int_to_string(1, 1), a single octet with
       value 1

   4.  H = "INVALID"

   5.  While H is "INVALID" or H is EC point at infinity:

       A.  ctr_string = int_to_string(ctr, 1)

       B.  hash_string = Hash(suite_string || one_string || PK_string ||
           alpha_string || ctr_string)

       C.  H = arbitrary_string_to_point(hash_string)

       D.  If H is not "INVALID" and cofactor > 1, set H = cofactor * H

       E.  ctr = ctr + 1

   6.  Output H








Goldberg, et al.         Expires March 11, 2019                [Page 15]

Internet-Draft                     VRF                    September 2018


5.4.1.2.  ECVRF_hash_to_curve_elligator2_25519

   The following ECVRF_hash_to_curve_elligator2_25519(suite_string, Y,
   alpha_string) algorithm implements ECVRF_hash_to_curve using the
   elligator2 algorithm from Section 5 of [BHKT13] (see also
   [I-D.irtf-cfrg-hash-to-curve]) exclusively for the Ed25519 elliptic
   curve (which the Edwards equivalent of Curve25519).  It can be
   implemented with running time that is independent of the input alpha
   (so-called "constant-time").

   ECVRF_hash_to_curve_elligator2_25519(suite_string, Y, alpha_string)

   Input:

      suite_string - a single octet specifying ECVRF ciphersuite.

      alpha_string - value to be hashed, an octet string

      Y - public key, an EC point

   Output:

      H - hashed value, a finite EC point in G

   Fixed options:

      p = 2^255-19, the size of the finite field F, a prime, for
      Curve25519

      A = 486662, Montgomery curve constant for Curve25519

      cofactor = 8 , the cofactor for Curve25519

   Constraints on options:

      output length of Hash is at least 16n (i.e., 256) bits

   Steps:

   1.   PK_string = point_to_string(Y)

   2.   one_string = 0x01 = int_to_string(1, 1)
        (a single octet with value 1)

   3.   hash_string = Hash(suite_string || one_string || PK_string ||
        alpha_string )

   4.   truncated_h_string = hash_string[0]...hash_string[31]



Goldberg, et al.         Expires March 11, 2019                [Page 16]

Internet-Draft                     VRF                    September 2018


   5.   oneTwentyEight_string = 0x80 = int_to_string(128, 1)
        (a single octet with value 128)

   6.   oneTwentySeven_string = 0x7F = int_to_string(127, 1)
        (a single octet with value 127)

   7.   x0 = truncated_h_string[31] & oneTwentyEight_string
        (where & denotes the bit-wise AND)
        (this step saves highest-order bit of octet 31 in x0)

   8.   truncated_h_string[31] = truncated_h_string[31] &
        oneTwentySeven_string
        (this step clears the high-order bit of octet 31)

   9.   r = string_to_int(truncated_h_string)

   10.  u = - A / (1 + 2*(r^2) ) mod p
        (note: the inverse of (1+2*(r^2)) modulo p is guaranteed to
        exist)

   11.  w = u * (u^2 + A*u + 1) mod p
        (this step evaluates the Montgomery equation for Curve25519)

   12.  Let e equal the Legendre symbol of w and p
        (see note below on how to compute e)

   13.  If e is equal to 1 then final_u = u; else final_u = (-A - u) mod
        p
        (note: final_u is the Montgomery u-coordinate of the output; see
        note below on how to compute it)

   14.  y_coordinate = (final_u - 1) / (final_u + 1) mod p
        (note 1: y_coordinate is the Edwards coordinate corresponding to
        final_u)
        (note 2: the inverse of (final_u + 1) modulo p is guaranteed to
        exist)

   15.  Form an octet string encoding of an elliptic curve point out of
        y_coordinate and x0, as follows:

        A.  h_string = int_to_string (y_coordinate, 32)

        B.  h_string[31] = h_string[31] | x0 [TODO: should we do this?
            hash-to-curve draft doesn't]
            (where | denotes the bit-wise OR)

   16.  H = string_to_point(h_string)




Goldberg, et al.         Expires March 11, 2019                [Page 17]

Internet-Draft                     VRF                    September 2018


        (note: string_to_point will not return INVALID by correctness of
        Elligator2)

   17.  Set H = cofactor * H

   18.  Output H

   In order to make this algorithm run in time that is (almost)
   independent of the input alpha_string (so-called "constant-time"),
   implementers should pay particular attention to Steps 12 and 13
   above.  These steps can be implemented using the following approach:

      e = w ^ ((p-1)/2) mod p

      final_u = (e*u + (e-1) * (A/2)) mod p

   The first step will produce a value e that is either 1 or p-1 (it is
   guaranteed not to be any other value, because w is guaranteed to be
   nonzero).  Implementers should also ensure that the second step runs
   in the same amount of time regardless of e by ensuring that
   arithmetic in constant time.

   Alternatively, let CMOV(result_if_1, result_if_0, selector) be the
   function that returns result_if_1 when selector is 1 and result_if_0
   when selector is 0.  If CMOV is implemented in constant time, then
   steps 12 and 13 above can be implemented as follows:

      e = (w^((p-1)/2))+1 mod p

      b = e/2

      other_u = (-A-u) mod p

      final_u = CMOV(u, other_u, b)

   (Note that after the first step, e is either 0 or 2, and only the
   least significant byte of e is needed in the second step).  CMOV can
   be implemented in constant time a variety of ways; for example, by
   expanding b from a single bit to an all-0 or all-1 string
   (accomplished by negating b in standard two's-complement arithmetic)
   and then applying bitwise XOR and AND operations as follows: other_x
   XOR ((x XOR other_x) AND b)

   If having this algorithm run in constant time is not important, then
   there are much faster algorithms to compute the Legendre symbol
   (which is the same as the Jacobi symbol because p is a prime).  See,
   for example, Section 12.3 of [ntb].




Goldberg, et al.         Expires March 11, 2019                [Page 18]

Internet-Draft                     VRF                    September 2018


5.4.1.3.  ECVRF_hash_to_curve_Simplified_SWU

   The following ECVRF_hash_to_curve_Simplified_SWU(suite_string, Y,
   alpha_string) algorithm implements ECVRF_hash_to_curve using the
   simplified Shallue-Woestijne [SW06] and Ulas [Ulas07] algorithm from
   Section 7 of [BCIMRT10] (see also [I-D.irtf-cfrg-hash-to-curve][TODO:
   Update to latest version]).  It can be implemented with running time
   that is independent of the input alpha (so-called "constant-time").
   Generally, this method can be used for any curve with prime p that is
   congruent to 3 modulo 4; however, the (very unlikely) case of d=0 in
   step 6 below may need to be handled differently depending on the
   curve equation, to ensure that the result is a point on the curve.

   ECVRF_hash_to_curve_Simplified_SWU(suite_string, Y, alpha_string)

   Input:

      suite_string - a single octet specifying ECVRF ciphersuite.

      alpha_string - value to be hashed, an octet string

      Y - public key, an EC point

   Output:

      H - hashed value, a finite EC point in G

   Fixed options:

      a and b, constants for the Weierstrass form elliptic curve
      equation y^2 = x^3 + ax +b for the curve E

   Steps:

   1.   PK_string = EC2OSP(Y)

   2.   one_string = 0x01 = I2OSP(1, 1), a single octet with value 1

   3.   h_string = Hash(suite_string || one_string || PK_string ||
        alpha_string)

   4.   t = string_to_int(h_string) mod p

   5.   r = -(t^2) mod p

   6.   d = (r^2 + r) mod p
        (d is t^4-t^2 mod p)




Goldberg, et al.         Expires March 11, 2019                [Page 19]

Internet-Draft                     VRF                    September 2018


   7.   If d = 0 then d_inverse = 0; else d_inverse = 1/d mod p
        (as long as Hash is secure, the case of d = 0 is an utterly
        improbably occurrence;
        the two cases can be combined into one by computing d_inverse =
        d^(p-2) mod p)

   8.   x = ((-b/a) * (1 + d_inverse)) mod p

   9.   w = (x^3 + a*x + b) mod p
        (this step evaluates the curve equation)

   10.  Let e equal the Legendre symbol of w and p
        (see note below on how to compute e)

   11.  If e is equal to 0 or 1 then final_x = x; else final_x = r * x
        mod p
        (final_x is the x-coordinate of the output; see note below on
        how to compute it)

   12.  H = arbitrary_string_to_point(int_to_string(final_x, 2n))
        (note: arbitrary_string_to_point will not return INVALID by
        correctness of Simple SWU)

   13.  If cofactor > 1, set H = cofactor * H

   14.  Output H

   In order to make this algorithm run in time that is (almost)
   independent of the input (so-called "constant-time"), implementers
   should pay particular attention to Steps 10 and 11 above.  These
   steps can be implemented using the following approach.  Let
   CMOV(result_if_1, result_if_0, selector) be the function that returns
   result_if_1 when selector is 1 and result_if_0 when selector is 0.
   If arithmetic and CMOV are implemented in constant time, then steps 9
   and 10 above can be implemented as follows:

      e = (w ^ ((p-1)/2))+1 mod p
      (At this point, e is 0, 1, or 2, as an integer.)

      Let b = (e+1) / 2, where / denotes integer division with rounding
      down.
      (Note carefully that this step is integer, not modular, division.
      Only the last byte of e is needed for this step.  This step
      converts 0, 1, or 2 to 0 or 1.)

      other_x = r * x mod p

      final_x = CMOV(x, other_x, b)



Goldberg, et al.         Expires March 11, 2019                [Page 20]

Internet-Draft                     VRF                    September 2018


   CMOV can be implemented in constant time a variety of ways; for
   example, by expanding b from a single bit to an all-0 or all-1 string
   (accomplished by negating b in standard two's-complement arithmetic)
   and then applying bitwise XOR and AND operations as follows: other_x
   XOR ((x XOR other_x) AND b)

   If having this algorithm run in constant time is not important, then
   there are much faster algorithms to compute the Legendre symbol
   (which is the same as the Jacobi symbol because p is a prime).  See,
   for example, Section 12.3 of [ntb].

5.4.2.  ECVRF Nonce Generation

   The following subroutines generate the nonce value k in a
   deterministic pseudorandom fashion.

5.4.2.1.  ECVRF Nonce Generation From RFC 6979

   ECVRF_nonce_generation_RFC6979(SK, h_string)

   Input:

      SK - an ECVRF secret key

      h_string - an octet string

   Output:

      k - an integer between 1 and q-1

   The ECVRF_nonce_generation function is as specified in [RFC6979]
   Section 3.2 where

      Step a is omitted

      h_1 is set equal to h_string

      The "suitable for DSA or ECDSA" check in step h.3 is omitted

      The hash function H is Hash and its output length hlen is set as
      hLen*8

      The secret key x is set equal to the VRF secret scalar x

      The prime q is the same as in this specification

      qlen is the binary length of q, i.e., the smallest integer such
      that 2^qlen > q



Goldberg, et al.         Expires March 11, 2019                [Page 21]

Internet-Draft                     VRF                    September 2018


      All the other values and primitives as defined in [RFC6979]

5.4.2.2.  ECVRF Nonce Generation From RFC 8032

   The following is from Steps 2-3 of Section 5.1.6 in [RFC8032].

   ECVRF_nonce_generation_RFC8032(SK, h_string)

   Input:

      SK - an ECVRF secret key

      h_string - an octet string

   Output:

      k - an integer between 0 and q-1

   Steps:

   1.  hashed_sk_string = Hash (SK)

   2.  truncated_hashed_sk_string =
       hashed_sk_string[32]...hashed_sk_string[63]

   3.  k_string = Hash(truncated_hashed_sk_string || h_string)

   4.  k = string_to_int(k_string) mod q

5.4.3.  ECVRF Hash Points

   ECVRF_hash_points(P1, P2, ..., PM)

   Input:

      P1...PM - EC points in G

   Output:

      c - hash value, integer between 0 and 2^(8n)-1

   Steps:

   1.  two_string = 0x02 = int_to_string(2, 1), a single octet with
       value 2

   2.  Initialize str = suite_string || two_string




Goldberg, et al.         Expires March 11, 2019                [Page 22]

Internet-Draft                     VRF                    September 2018


   3.  for PJ in [P1, P2, ... PM]:
       str = str || point_to_string(PJ)

   4.  c_string = Hash(str)

   5.  truncated_c_string = c_string[0]...c_string[n-1]

   6.  c = string_to_int(truncated_c_string)

   7.  Output c

5.4.4.  ECVRF Decode Proof

   ECVRF_decode_proof(pi_string)

   Input:

      pi_string - VRF proof, octet string (ptLen+n+qLen octets)

   Output:

      "INVALID", or

      Gamma - EC point

      c - integer between 0 and 2^(8n)-1

      s - integer between 0 and 2^(8qLen)-1

   Steps:

   1.  let gamma_string = pi_string[0]...p_string[ptLen-1]

   2.  let c_string = pi_string[ptLen]...pi_string[ptLen+n-1]

   3.  let s_string =pi_string[ptLen+n]...pi_string[ptLen+n+qLen-1]

   4.  Gamma = string_to_point(gamma_string)

   5.  if Gamma = "INVALID" output "INVALID" and stop.

   6.  c = string_to_int(c_string)

   7.  s = string_to_int(s_string)

   8.  Output Gamma, c, and s





Goldberg, et al.         Expires March 11, 2019                [Page 23]

Internet-Draft                     VRF                    September 2018


5.5.  ECVRF Ciphersuites

   This document defines ECVRF-P256-SHA256-TAI as follows:

   o  suite_string = 0x01 = int_to_string(1, 1).

   o  The EC group G is the NIST P-256 elliptic curve, with curve
      parameters as specified in [FIPS-186-4] (Section D.1.2.3) and
      [RFC5114]  (Section 2.6).  For this group, 2n = qLen = 32 and
      cofactor = 1.

   o  The key pair generation primitive is specified in Section 3.2.1 of
      [SECG1] (q, B, SK, and PK in this document correspond to in n, G,
      d, and Q in Section 3.2.1 of [SECG1]).  In this ciphersuite, the
      secret scalar x is equal to the private key SK.

   o  The ECVRF_nonce_generation function is as specified in
      Section 5.4.2.1.

   o  The int_to_string function is the I2OSP function specified in
      Section 4.1 of [RFC8017].  (This is big endian representation.)

   o  The string_to_int function is the OS2IP function specified in
      Section 4.2 of [RFC8017].  (This is big endian representation.)

   o  The point_to_string function converts an EC point to an octet
      string according to the encoding specified in Section 2.3.3 of
      [SECG1] with point compression on.  This implies ptLen = 2n + 1 =
      33.  (Note that certain software implementations do not introduce
      a seperate elliptic curve point type and instead directly treat
      the EC point as an octet string per above encoding.  When using
      such an implementation, the point_to_string function can be
      treated as the identity function.)

   o  The string_to_point function converts an octet string to an EC
      point according to the encoding specified in Section 2.3.4 of
      [SECG1].  This function MUST output INVALID if the octet string
      does not decode to an EC point.

   o  arbitrary_string_to_point(h_string) = string_to_point(0x02 ||
      h_string) (where 0x02 is a single octet with value 2,
      0x02=int_to_string(2, 1)).  The input h_string is a 32-octet
      string and the output is either an EC point or "INVALID".

   o  The hash function Hash is SHA-256 as specified in [RFC6234], with
      hLen = 32.





Goldberg, et al.         Expires March 11, 2019                [Page 24]

Internet-Draft                     VRF                    September 2018


   o  The ECVRF_hash_to_curve function is as specified in
      Section 5.4.1.1.

   This document defines ECVRF-P256-SHA256-SWU as follows:

   o  This ciphersuite is identical to ECVRF-P256-SHA256-TAI except that
      the ECVRF_hash_to_curve function is as specified in
      Section 5.4.1.3 and suite_string = 0x02 = int_to_string(2, 1).

   This document defines ECVRF-ED25519-SHA512-TAI as follows:

   o  suite_string = 0x03 = int_to_string(3, 1).

   o  The EC group G is the Ed25519 elliptic curve with parameters
      defined in Table 1 of [RFC8032].  For this group, 2n = qLen = 32
      and cofactor = 8.

   o  The private key and generation of the secret scalar and the public
      key are specified in Section 5.1.5 of [RFC8032]

   o  The ECVRF_nonce_generation function is as specified in
      Section 5.4.2.2.

   o  The int_to_string function as specified in the first paragraph of
      Section 5.1.2 of [RFC8032].  (This is little endian
      representation.)

   o  The string_to_int function interprets the string as an integer in
      little-endian representation.

   o  The point_to_string function converts an EC point to an octect
      string according to the encoding specified in Section 5.1.2 of
      [RFC8032].  This implies ptLen = 2n = 32.  (Note that certain
      software implementations do not introduce a seperate elliptic
      curve point type and instead directly treat the EC point as an
      octet string per above encoding.  When using such and
      implementation, the point_to_string function can be treated as the
      identity function.)

   o  The string_to_point function converts an octet string to an EC
      point according to the encoding specified in Section 5.1.3 of
      [RFC8032].  This function MUST output INVALID if the octet string
      does not decode to an EC point.

   o  arbitrary_string_to_point(h_string) =
      string_to_point(h_string[0]...h_string[31])





Goldberg, et al.         Expires March 11, 2019                [Page 25]

Internet-Draft                     VRF                    September 2018


   o  The hash function Hash is SHA-512 as specified in [RFC6234], with
      hLen = 64.

   o  The ECVRF_hash_to_curve function is as specified in
      Section 5.4.1.1.

   This document defines ECVRF-ED25519-SHA512-Elligator2 as follows:

   o  This ciphersuite is identical to ECVRF-ED25519-SHA512-TAI except
      that the ECVRF_hash_to_curve function is as specified in
      Section 5.4.1.2 and suite_string = 0x04 = int_to_string(4, 1).

5.6.  When the ECVRF Keys are Untrusted

   The ECVRF as specified above is a VRF that satisfies the "trusted
   uniqueness", "trusted collision resistance", and "full
   pseudorandomness" properties defined in Section 3.  In order to
   obtain "full uniqueness" and "full collision resistance" (which
   provide protection against a malicious VRF public key), the Verifier
   MUST perform the following additional validation procedure upon
   receipt of the public VRF key.  The public VRF key MUST NOT be used
   if this procedure returns "INVALID".

   Note that this procedure is not sufficient if the elliptic curve E or
   the point B, the generator of group G, is untrusted.  If the prover
   is untrusted, the Verifier MUST obtain E and B from a trusted source,
   such as a ciphersuite specification, rather than from the prover.

   This procedure supposes that the public key provided to the Verifier
   is an octet string.  The procedure returns "INVALID" if the public
   key in invalid.  Otherwise, it returns Y, the public key as an EC
   point.

5.6.1.  ECVRF Validate Key

   ECVRF_validate_key(PK_string)

   Input:

      PK_string - public key, an octet string

   Output:

      "INVALID", or

      Y - public key, an EC point

   Steps:



Goldberg, et al.         Expires March 11, 2019                [Page 26]

Internet-Draft                     VRF                    September 2018


   1.  Y = string_to_point(PK_string)

   2.  If Y is "INVALID", output "INVALID" and stop

   3.  If cofactor*Y is the EC point at infinty, output "INVALID" and
       stop

   4.  Output Y

   Note that if the cofactor = 1, then Step 3 need not multiply Y by the
   cofactor; instead, it suffices to output "INVALID" if Y is the point
   at infinity.  Moreover, when cofactor>1, it is not necessary to
   verify that Y is in the subgroup G; Step 3 suffices.  Therefore, if
   the cofactor is small, the total number of points that could cause
   Step 3 to output "INVALID" may be small, and it may be more efficient
   to simply check Y against a fixed list of such points.  For example,
   the following algorithm can be used for the Ed25519 curve:

   1.   Y = string_to_point(PK_string)

   2.   If Y is "INVALID", output "INVALID" and stop

   3.   y_string = PK_string

   4.   oneTwentySeven_string = 0x7F = int_to_string(127, 1)
        (a single octet with value 127)

   5.   y_string[31] = y_string[31] & oneTwentySeven_string
        (this step clears the high-order bit of octet 31)

   6.   bad_pk[0] = int_to_string(0, 32)

   7.   bad_pk[1] = int_to_string(1, 32)

   8.   bad_y2 = 2707385501144840649318225287225658788936804267575313519
        463743609750303402022

   9.   bad_pk[2] = int_to_string(bad_y2, 32)

   10.  bad_pk[3] = int_to_string(p-bad_y2, 32)

   11.  bad_pk[4] = int_to_string(p-1, 32)

   12.  bad_pk[5] = int_to_string(p, 32)

   13.  bad_pk[6] = int_to_string(p+1, 32)





Goldberg, et al.         Expires March 11, 2019                [Page 27]

Internet-Draft                     VRF                    September 2018


   14.  If y_string is in bad_pk[0]...bad_pk[6], output "INVALID" and
        stop

   15.  Output Y

   (bad_pk[0], bad_pk[2], bad_pk[3] each match two bad public keys,
   depending on the sign of the x-coordinate, which was cleared in step
   5, in order to make sure that it does not affect the comparison.
   bad_pk[1] and bad_pk[4] each match one bad public key, because
   x-coordinate is 0 for these two public keys. bad_pk[5] and bad_pk[6]
   are simply bad_pk[0] and bad_pk[1] shifted by p, in case the
   y-coordinate had not been modular reduced by p.  There is no need to
   shift the other bad_pk values by p, because they will exceed 2^255.
   These bad keys, which represent all points of order 1, 2, 4, and 8,
   have been obtained by converting the points specified in [X25519] to
   Edwards coordinates.)

6.  Implementation Status

   [TODO: Needs Updating; include also implementations of various parts,
   so developers can access them]

   An implementation of the RSA-FDH-VRF (SHA-256) and ECVRF-
   P256-SHA256-TAI was first developed as a part of the NSEC5 project
   [I-D.vcelak-nsec5] and is available at <http://github.com/fcelda/
   nsec5-crypto>.  The ECVRF implementation may be out of date as this
   spec has evolved.

   The Key Transparency project at Google uses a VRF implemention that
   is similar to the ECVRF-P256-SHA256-TAI, with a few minor changes
   including the use of SHA-512 instead of SHA-256.  Its implementation
   is available
   <https://github.com/google/keytransparency/blob/master/core/vrf/
   vrf.go>

   An implementation by Yahoo! similar to the ECVRF is available at
   <https://github.com/r2ishiguro/vrf>.

   An implementation similar to ECVRF is available as part of the CONIKS
   implementation in Golang at <https://github.com/coniks-sys/coniks-
   go/tree/master/crypto/vrf>.

   Open Whisper Systems also uses a VRF very similar to ECVRF-
   ED25519-SHA512-Elligator, called VXEdDSA, and specified here:
   <https://whispersystems.org/docs/specifications/xeddsa/>






Goldberg, et al.         Expires March 11, 2019                [Page 28]

Internet-Draft                     VRF                    September 2018


7.  Security Considerations

7.1.  Key Generation

   Applications that use the VRFs defined in this document MUST ensure
   that that the VRF key is generated correctly, using good randomness.

7.1.1.  Uniqueness and collision resistance with untrusted keys

   The ECVRF as specified in Section 5.1-Section 5.5 statisfies the
   "trusted uniqueness" and "trusted collision resistance" properties as
   long as the VRF keys are generated correctly, with good randomness.
   If the Verifier trusts the VRF keys are generated correctly, it MAY
   use the public key Y as is.

   However, if the ECVRF uses keys that could be generated
   adversarially, then the the Verfier MUST first perform the validation
   procedure ECVRF_validate_key(PK) (specified in Section 5.6) upon
   receipt of the public key PK as an octet string.  If the validation
   procedure outputs "INVALID", then the public key MUST not be used.
   Otherwise, the procedure will output a valid public key Y, and the
   ECVRF with public key Y satisfies the "full uniqueness" and "full
   collision resistance" properties.

   The RSA-FDH-VRF statisfies the "trusted uniqueness" and "trusted
   collision resistance" properties as long as the VRF keys are
   generated correctly, with good randomness.  These properties may not
   hold if the keys are generated adversarially (e.g., if RSA is not
   permutation).  Meanwhile, the "full uniqueness" and "full collision
   resistance" are properties that hold even if VRF keys are generated
   by an adversary.  The RSA-FDH-VRF defined in this document does not
   have these properties.  However, if adversarial key generation is a
   concern, the RSA-FDH-VRF may be modifed to have these properties by
   adding additional cryptographic checks that its public key has the
   right form.  These modifications are left for future specification.

7.1.2.  Pseudorandomness with untrusted keys

   Without good randomness, the "pseudorandomness" properties of the VRF
   may not hold.  Note that it is not possible to guarantee
   pseudorandomness in the face of adversarially generated VRF keys.
   This is because an adversary can always use bad randomness to
   generate the VRF keys, and thus, the VRF output may not be
   pseudorandom.







Goldberg, et al.         Expires March 11, 2019                [Page 29]

Internet-Draft                     VRF                    September 2018


7.2.  Selective vs Full Pseudorandomness

   [PWHVNRG17] presents cryptographic reductions to an underlying hard
   problem (e.g.  Decisional Diffie Hellman for the ECVRF, or the
   standard RSA assumption for RSA-FDH-VRF) that prove the VRFs
   specificied in this document possess full pseudorandomness as well as
   selective pseudorandomness.  However, the cryptographic reductions
   are tighter for selective pseudorandomness than for full
   pseudorandomness.  This means the the VRFs have quantitavely stronger
   security guarentees for selective pseudorandomness.

   Applications that are concerned about tightness of cryptographic
   reductions therefore have two options.

   o  They may choose to ensure that selective pseudorandomness is
      sufficient for the application.  That is, that pseudorandomness of
      outputs matters only for inputs that are chosen independently of
      the VRF key.

   o  If full pseudorandomness is required for the application, the
      application may increase security parameters to make up for the
      loose security reduction.  For RSA-FDH-VRF, this means increasing
      the RSA key length.  For ECVRF, this means increasing the
      cryptographic strength of the EC group G.  For both RSA-FDH-VRF
      and ECVRF the cryptographic strength of the hash function Hash may
      also potentially need to be increased.

7.3.  Proper pseudorandom nonce for ECVRF

   The security of the ECVRF defined in this document relies on the fact
   that nonce k used in the ECVRF_prove algorithm is chosen uniformly
   and pseudorandomly modulo q, and is unknown to the advesrary.
   Otherwise, an adversary may be able to recover the private VRF key x
   (and thus break pseudorandomness of the VRF) after observing several
   valid VRF proofs pi.  The nonce generation methods specified in the
   ECVRF ciphersuites of Section 5.5 are designed with this requirement
   in mind.

7.4.  Side-channel attacks

   Side channel attacks on cryptographic primatives are an important
   issue.  Here we discuss only one such side channel: timing attacks
   that can be used to leak information about the VRF input alpha.
   Implementers should take care to avoid side-channel attacks that leak
   information about the VRF private key SK (and the nonce k used in the
   ECVRF).





Goldberg, et al.         Expires March 11, 2019                [Page 30]

Internet-Draft                     VRF                    September 2018


   The ECVRF_hash_to_curve_try_and_increment algorithm defined in
   Section 5.4.1.1 SHOULD NOT be used in applications where the VRF
   input alpha is secret and is hashed by the VRF on-the-fly.  This is
   because the algorithm's running time depends on the VRF input alpha,
   and thus creates a timing channel that can be used to learn
   information about alpha.  That said, for most inputs the amount of
   information obtained from such a timing attack is likely to be small
   (1 bit, on average), since the algorithm is expected to find a valid
   curve point after only two attempts.  However, there might be inputs
   which cause the algorithm to make many attempts before it finds a
   valid curve point; for such inputs, the information leaked in a
   timing attack will be more than 1 bit.

   Meanwhile, ECVRF-ED25519-SHA512-Elligator2 runs in time constant in
   alpha if the implementation of the ECVRF_hash_to_curve function
   specified in Section 5.4.1.2 also runs in constant time.

7.5.  Proofs Provide No Secrecy for VRF Input

   The VRF proof pi is not designed to provide secrecy and, in general,
   may reveal the VRF input alpha.  Anyone who knows PK and pi is able
   to perform an offline dictionary attack to search for alpha, by
   verifying guesses for alpha using VRF_verify.  This is in contrast to
   the VRF hash output beta which, without the proof, is pseudorandom
   and thus is designed to reveal no information about alpha.

7.6.  Prehashing

   The VRFs specified in this document allow for read-once access to the
   input alpha for both signing and verifying.  Thus, additional
   prehashing of alpha (as specified, for example, in [RFC8032] for
   EdDSA signatures) is not needed, even for applications that need to
   handle long alpha or to support the Initialized-Update-Finalize (IUF)
   interface (in such an interface, alpha is not supplied all at once,
   but rather in pieces by a sequence of calls to Update).  The ECVRF,
   in particular, uses alpha only in ECVRF_hash_to_curve.  The curve
   point H becomes the representative of alpha thereafter.  Note that
   the suite_string octet and the public key are hashed together with
   alpha in ECVRF_hash_to_curve, which ensures that the curve (including
   the generator B) and the public key are included indirectly into
   subsequent hashes.

7.7.  Hash function domain separation and future-proofing

   Hashing is used for different purposes in the two VRFs (namely, in
   the RSA-FDH-VRF, in MGF1 and in proof_to_hash; in the ECVRF, in
   hash_to_curve, nonce_generation, hash_points, and proof_to_hash).
   The theoretical analysis assumes each of these functions is a



Goldberg, et al.         Expires March 11, 2019                [Page 31]

Internet-Draft                     VRF                    September 2018


   separate random oracle.  This analysis still holds even if the same
   hash function is used, as long as the four queries made to the hash
   function for a given SK and alpha are overwhelmingly unlikely to
   equal each other or to any queries made to the hash function for the
   same SK and different alpha.  This is indeed the case for the RSA-
   FDH-VRF defined in this document, because the first octets of the
   input to the hash function used in MGF1 and in proof_to_hash are
   different.  This is also the case for the ECVRF ciphersuites defined
   in this document, because:

   o  inputs to the hash function used during nonce_generation are
      unlikely to equal to inputs given to hash_to_curve, proof_to_hash,
      and hash_points.  This follows since nonce_generation inputs a
      secret to the hash function that is not used by honest parties as
      input to any other hash function, and is not available to the
      adversary

   o  the second octet of the input to the hash function used in
      hash_to_curve, proof_to_hash, and hash_points are all different

   For the RSA VRF, if future designs need to specify variants of the
   design in this document, such variants should use different first
   octets in inputs to MGF1 and to the hash funciton used in
   proof_to_hash, in order to avoid the possibility that an adversary
   can obtain a VRF output under one variant, and then claim it was
   obtained under another variant

   For the elliptic curve VRF, if future designs need to specify
   variants (e.g., additional ciphersuites) of the design in this
   document, then, to avoid the possibility that an adversary can obtain
   a VRF output under one variant, and then claim it was obtained under
   another variant, they should specify a different suite_string
   constant.  This way, the inputs to the hash_to_curve hash function
   used in producing H are guaranteed to be different; since all the
   other hashing done by the prover depends on H, inputs all the hash
   functions used by the prover will also be different as long as
   hash_to_curve is collision resistant.

8.  Change Log

   Note to RFC Editor: if this document does not obsolete an existing
   RFC, please remove this appendix before publication as an RFC.

      00 - Forked this document from draft-goldbe-vrf-01.

      01 - Minor updates, mostly highlighting TODO items.





Goldberg, et al.         Expires March 11, 2019                [Page 32]

Internet-Draft                     VRF                    September 2018


      02 - Added specification of elligator2 for Curve25519, along with
      ciphersuites for ECVRF-ED25519-SHA512-Elligator.  Changed ECVRF-
      ED25519-SHA256 suite_string to ECVRF-ED25519-SHA512.  (This change
      made because Ed25519 in [RFC8032] signatures use SHA512 and not
      SHA256.)  Made ECVRF nonce generation a separate component, so
      that nonces are determinsitic.  In ECVRF proving, changed + to -
      (and made corresponding verification changes) in order to be
      consistent with EdDSA and ECDSA.  Highlighted that
      ECVRF_hash_to_curve acts like a prehash.  Added "suites" variable
      to ECVRF for future-proofing.  Ensured domain separation for hash
      functions by modifying hash_points and added discussion about
      domain separation.  Updated todos in the "additional
      pseudorandomness property" section.  Added an discussion of
      secrecy into security considerations.  Removed B and PK=Y from
      ECVRF_hash_points because they are already present via H, which is
      computed via hash_to_curve using the suite_string (which
      identifies B) and Y.

      03 - Changed Ed25519 conversions to little-endian, to match RFC
      8032; added simple key validation for Ed25519; added Simple SWU
      cipher suite; clarified Elligator; added domain separation for RSA
      VRF; improved notation throughout; added nonce generation as a
      section; changed counter in try-and-increment from four bytes to
      one, to avoid endian issues; renamed try-and-increment
      ciphersuites to -TAI; added qLen as a separate paremeter; changed
      output length to hLen for ECVRF, to match RSAVRF

9.  Contributors

   This document also would not be possible without the work of Moni
   Naor (Weizmann Institute), Sachin Vasant (Cisco Systems), and Asaf
   Ziv (Facebook).  Shumon Huque, David C.  Lawerence, Trevor Perrin,
   Annie Yousar, Stanislav Smyshlyaev, Liliya Akhmetzyanova, Tony
   Arcieri, Sergey Gorbunov, Sam Scott, Nick Sullivan, Christopher Wood,
   Marek Jankowski, Derek Ting-Haye Leung, Adam Suhl, and Gary Belvin
   provided valuable input to this draft.  [TODO: Add more people who
   commented]

10.  References

10.1.  Normative References

   [FIPS-186-4]
              National Institute for Standards and Technology, "Digital
              Signature Standard (DSS)", FIPS PUB 186-4, July 2013,
              <https://csrc.nist.gov/publications/detail/fips/186/4/
              final>.




Goldberg, et al.         Expires March 11, 2019                [Page 33]

Internet-Draft                     VRF                    September 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5114]  Lepinski, M. and S. Kent, "Additional Diffie-Hellman
              Groups for Use with IETF Standards", RFC 5114,
              DOI 10.17487/RFC5114, January 2008,
              <https://www.rfc-editor.org/info/rfc5114>.

   [RFC6234]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/info/rfc6234>.

   [RFC6979]  Pornin, T., "Deterministic Usage of the Digital Signature
              Algorithm (DSA) and Elliptic Curve Digital Signature
              Algorithm (ECDSA)", RFC 6979, DOI 10.17487/RFC6979, August
              2013, <https://www.rfc-editor.org/info/rfc6979>.

   [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,
              "PKCS #1: RSA Cryptography Specifications Version 2.2",
              RFC 8017, DOI 10.17487/RFC8017, November 2016,
              <https://www.rfc-editor.org/info/rfc8017>.

   [RFC8032]  Josefsson, S. and I. Liusvaara, "Edwards-Curve Digital
              Signature Algorithm (EdDSA)", RFC 8032,
              DOI 10.17487/RFC8032, January 2017,
              <https://www.rfc-editor.org/info/rfc8032>.

   [SECG1]    Standards for Efficient Cryptography Group (SECG), "SEC 1:
              Elliptic Curve Cryptography", Version 2.0, May 2009,
              <http://www.secg.org/sec1-v2.pdf>.

10.2.  Informative References

   [BCIMRT10]
              Brier, E., Coron, J., Icart, T., Madore, D., Randriam, H.,
              and M. Tibouchi, "Efficient Indifferentiable Hashing into
              Ordinary Elliptic Curves", in Advances in Cryptology -
              CRYPTO, 2010, <https://eprint.iacr.org/2009/340>.

   [BHKT13]   Bernstein, D., Hamburg, M., Krasnova, A., and T. Lange,
              "Elligator: elliptic-curve points indistinguishable from
              uniform random strings", in ACM SIGSAC Conference on
              Computer and Communications Security (CCS), 2013,
              <https://elligator.cr.yp.to/elligator-20130828.pdf>.




Goldberg, et al.         Expires March 11, 2019                [Page 34]

Internet-Draft                     VRF                    September 2018


   [GHMVZ17]  Gilad, Y., Hemo, R., Micali, Y., Vlachos, Y., and Y.
              Zeldovich, "Algorand: Scaling Byzantine Agreements for
              Cryptocurrencies", in Proceedings of the 26th Symposium on
              Operating Systems Principles (SOSP), 2017,
              <https://eprint.iacr.org/2017/454>.

   [I-D.irtf-cfrg-hash-to-curve]
              Scott, S., Sullivan, N., and C. Wood, "Hashing to Elliptic
              Curves", draft-irtf-cfrg-hash-to-curve-01 (work in
              progress), July 2018.

   [I-D.vcelak-nsec5]
              Vcelak, J., Goldberg, S., Papadopoulos, D., Huque, S., and
              D. Lawrence, "NSEC5, DNSSEC Authenticated Denial of
              Existence", draft-vcelak-nsec5-07 (work in progress), June
              2018.

   [KRDO17]   Kiayias, A., Russell, A., David, B., and R. Oliynykov,
              "Ouroboros: A Provably Secure Proof-of-Stake Blockchain
              Protocol", in Advances in Cryptology - CRYPTO, 2017,
              <https://eprint.iacr.org/2016/889>.

   [MRV99]    Michali, S., Rabin, M., and S. Vadhan, "Verifiable Random
              Functions", in FOCS, 1999,
              <https://dash.harvard.edu/handle/1/5028196>.

   [ntb]      Shoup, V., "A Computational Introduction to Number Theory
              and Algebra", 2008, <http://www.shoup.net/ntb/ntb-v2.pdf>.

   [PWHVNRG17]
              Papadopoulos, D., Wessels, D., Huque, S., Vcelak, J.,
              Naor, M., Reyzin, L., and S. Goldberg, "Making NSEC5
              Practical for DNSSEC", in ePrint Cryptology Archive
              2017/099, February 2017,
              <https://eprint.iacr.org/2017/099.pdf>.

   [SW06]     Shallue, A. and C. van de Woestijne, "Construction of
              rational points on elliptic curves over finite fields",
              in Algorithmic Number Theory - ANTS, 2006,
              <https://works.bepress.com/andrew_shallue/1/>.

   [Ulas07]   Ulas, M., "Rational points on certain hyperelliptic curves
              over finite fields", in Bull. Polish Acad. Sci. Math.,
              2007, <https://arxiv.org/abs/0706.1448>.

   [X25519]   Bernstein, D., "How do I validate Curve25519 public
              keys?", 2006, <https://cr.yp.to/ecdh.html#validate>.




Goldberg, et al.         Expires March 11, 2019                [Page 35]

Internet-Draft                     VRF                    September 2018


Appendix A.  Test Vectors

   [TODO]

Authors' Addresses

   Sharon Goldberg
   Boston University
   111 Cummington St, MCS135
   Boston, MA  02215
   USA

   EMail: goldbe@cs.bu.edu


   Leonid Reyzin
   Boston University
   111 Cummington St, MCS135
   Boston, MA  02215
   USA

   EMail: reyzin@bu.edu


   Dimitrios Papadopoulos
   Hong Kong University of Science and Techology
   Clearwater Bay
   Hong Kong

   EMail: dipapado@cse.ust.hkbu.edu


   Jan Vcelak
   NS1
   16 Beaver St
   New York, NY  10004
   USA

   EMail: jvcelak@ns1.com












Goldberg, et al.         Expires March 11, 2019                [Page 36]
